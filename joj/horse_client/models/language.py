# coding: utf-8

"""
    JOJ Horse

    Git version: 6a64ecc@2022-05-19T15:50:22Z  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Language(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compile_files': 'list[str]',
        'compile_args': 'list[str]',
        'case_default': 'Case',
        'cases': 'list[Case]',
        'name': 'str'
    }

    attribute_map = {
        'compile_files': 'compileFiles',
        'compile_args': 'compileArgs',
        'case_default': 'caseDefault',
        'cases': 'cases',
        'name': 'name'
    }

    def __init__(self, compile_files=None, compile_args=None, case_default=None, cases=None, name=None):  # noqa: E501
        """Language - a model defined in Swagger"""  # noqa: E501
        self._compile_files = None
        self._compile_args = None
        self._case_default = None
        self._cases = None
        self._name = None
        self.discriminator = None
        if compile_files is not None:
            self.compile_files = compile_files
        if compile_args is not None:
            self.compile_args = compile_args
        if case_default is not None:
            self.case_default = case_default
        if cases is not None:
            self.cases = cases
        self.name = name

    @property
    def compile_files(self):
        """Gets the compile_files of this Language.  # noqa: E501


        :return: The compile_files of this Language.  # noqa: E501
        :rtype: list[str]
        """
        return self._compile_files

    @compile_files.setter
    def compile_files(self, compile_files):
        """Sets the compile_files of this Language.


        :param compile_files: The compile_files of this Language.  # noqa: E501
        :type: list[str]
        """

        self._compile_files = compile_files

    @property
    def compile_args(self):
        """Gets the compile_args of this Language.  # noqa: E501


        :return: The compile_args of this Language.  # noqa: E501
        :rtype: list[str]
        """
        return self._compile_args

    @compile_args.setter
    def compile_args(self, compile_args):
        """Sets the compile_args of this Language.


        :param compile_args: The compile_args of this Language.  # noqa: E501
        :type: list[str]
        """

        self._compile_args = compile_args

    @property
    def case_default(self):
        """Gets the case_default of this Language.  # noqa: E501


        :return: The case_default of this Language.  # noqa: E501
        :rtype: Case
        """
        return self._case_default

    @case_default.setter
    def case_default(self, case_default):
        """Sets the case_default of this Language.


        :param case_default: The case_default of this Language.  # noqa: E501
        :type: Case
        """

        self._case_default = case_default

    @property
    def cases(self):
        """Gets the cases of this Language.  # noqa: E501


        :return: The cases of this Language.  # noqa: E501
        :rtype: list[Case]
        """
        return self._cases

    @cases.setter
    def cases(self, cases):
        """Sets the cases of this Language.


        :param cases: The cases of this Language.  # noqa: E501
        :type: list[Case]
        """

        self._cases = cases

    @property
    def name(self):
        """Gets the name of this Language.  # noqa: E501


        :return: The name of this Language.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Language.


        :param name: The name of this Language.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Language, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Language):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
