# coding: utf-8

"""
    JOJ Horse

    Git version: 9cf2be7@2021-07-16 12:11:03  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DomainUserPermission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'domain': 'AnyOfDomainUserPermissionDomain',
        'user': 'AnyOfDomainUserPermissionUser',
        'role': 'str',
        'join_at': 'datetime',
        'permission': 'object'
    }

    attribute_map = {
        'id': 'id',
        'domain': 'domain',
        'user': 'user',
        'role': 'role',
        'join_at': 'join_at',
        'permission': 'permission'
    }

    def __init__(self, id=None, domain=None, user=None, role=None, join_at=None, permission=None):  # noqa: E501
        """DomainUserPermission - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._domain = None
        self._user = None
        self._role = None
        self._join_at = None
        self._permission = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.domain = domain
        self.user = user
        self.role = role
        if join_at is not None:
            self.join_at = join_at
        if permission is not None:
            self.permission = permission

    @property
    def id(self):
        """Gets the id of this DomainUserPermission.  # noqa: E501


        :return: The id of this DomainUserPermission.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DomainUserPermission.


        :param id: The id of this DomainUserPermission.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def domain(self):
        """Gets the domain of this DomainUserPermission.  # noqa: E501


        :return: The domain of this DomainUserPermission.  # noqa: E501
        :rtype: AnyOfDomainUserPermissionDomain
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DomainUserPermission.


        :param domain: The domain of this DomainUserPermission.  # noqa: E501
        :type: AnyOfDomainUserPermissionDomain
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def user(self):
        """Gets the user of this DomainUserPermission.  # noqa: E501


        :return: The user of this DomainUserPermission.  # noqa: E501
        :rtype: AnyOfDomainUserPermissionUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DomainUserPermission.


        :param user: The user of this DomainUserPermission.  # noqa: E501
        :type: AnyOfDomainUserPermissionUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def role(self):
        """Gets the role of this DomainUserPermission.  # noqa: E501


        :return: The role of this DomainUserPermission.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this DomainUserPermission.


        :param role: The role of this DomainUserPermission.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def join_at(self):
        """Gets the join_at of this DomainUserPermission.  # noqa: E501


        :return: The join_at of this DomainUserPermission.  # noqa: E501
        :rtype: datetime
        """
        return self._join_at

    @join_at.setter
    def join_at(self, join_at):
        """Sets the join_at of this DomainUserPermission.


        :param join_at: The join_at of this DomainUserPermission.  # noqa: E501
        :type: datetime
        """

        self._join_at = join_at

    @property
    def permission(self):
        """Gets the permission of this DomainUserPermission.  # noqa: E501


        :return: The permission of this DomainUserPermission.  # noqa: E501
        :rtype: object
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this DomainUserPermission.


        :param permission: The permission of this DomainUserPermission.  # noqa: E501
        :type: object
        """

        self._permission = permission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainUserPermission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainUserPermission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
