# coding: utf-8

"""
    JOJ Horse

    Git version: b134e64@2021-08-11 17:59:40  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DomainInvitation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'code': 'str',
        'role': 'str',
        'expire_at': 'datetime',
        'domain_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'code': 'code',
        'role': 'role',
        'expire_at': 'expire_at',
        'domain_id': 'domain_id'
    }

    def __init__(self, id=None, created_at=None, updated_at=None, code=None, role=None, expire_at=None, domain_id=None):  # noqa: E501
        """DomainInvitation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._code = None
        self._role = None
        self._expire_at = None
        self._domain_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        self.code = code
        self.role = role
        self.expire_at = expire_at
        self.domain_id = domain_id

    @property
    def id(self):
        """Gets the id of this DomainInvitation.  # noqa: E501


        :return: The id of this DomainInvitation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DomainInvitation.


        :param id: The id of this DomainInvitation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this DomainInvitation.  # noqa: E501


        :return: The created_at of this DomainInvitation.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DomainInvitation.


        :param created_at: The created_at of this DomainInvitation.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DomainInvitation.  # noqa: E501


        :return: The updated_at of this DomainInvitation.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DomainInvitation.


        :param updated_at: The updated_at of this DomainInvitation.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def code(self):
        """Gets the code of this DomainInvitation.  # noqa: E501


        :return: The code of this DomainInvitation.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DomainInvitation.


        :param code: The code of this DomainInvitation.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def role(self):
        """Gets the role of this DomainInvitation.  # noqa: E501


        :return: The role of this DomainInvitation.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this DomainInvitation.


        :param role: The role of this DomainInvitation.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def expire_at(self):
        """Gets the expire_at of this DomainInvitation.  # noqa: E501


        :return: The expire_at of this DomainInvitation.  # noqa: E501
        :rtype: datetime
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this DomainInvitation.


        :param expire_at: The expire_at of this DomainInvitation.  # noqa: E501
        :type: datetime
        """
        if expire_at is None:
            raise ValueError("Invalid value for `expire_at`, must not be `None`")  # noqa: E501

        self._expire_at = expire_at

    @property
    def domain_id(self):
        """Gets the domain_id of this DomainInvitation.  # noqa: E501


        :return: The domain_id of this DomainInvitation.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this DomainInvitation.


        :param domain_id: The domain_id of this DomainInvitation.  # noqa: E501
        :type: str
        """
        if domain_id is None:
            raise ValueError("Invalid value for `domain_id`, must not be `None`")  # noqa: E501

        self._domain_id = domain_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainInvitation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainInvitation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
