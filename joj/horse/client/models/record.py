# coding: utf-8

"""
    JOJ Horse

    Git version: 0f913fc@2021-11-30T11:39:09Z  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Record(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'state': 'AllOfRecordState',
        'language': 'str',
        'toolchains': 'list[str]',
        'commit_id': 'str',
        'score': 'int',
        'time_ms': 'int',
        'memory_kb': 'int',
        'problem_set_id': 'str',
        'problem_id': 'str',
        'problem_config_id': 'str',
        'committer_id': 'str',
        'judger_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'state': 'state',
        'language': 'language',
        'toolchains': 'toolchains',
        'commit_id': 'commitId',
        'score': 'score',
        'time_ms': 'timeMs',
        'memory_kb': 'memoryKb',
        'problem_set_id': 'problemSetId',
        'problem_id': 'problemId',
        'problem_config_id': 'problemConfigId',
        'committer_id': 'committerId',
        'judger_id': 'judgerId'
    }

    def __init__(self, id=None, state=None, language=None, toolchains=None, commit_id=None, score=0, time_ms=0, memory_kb=0, problem_set_id=None, problem_id=None, problem_config_id=None, committer_id=None, judger_id=None):  # noqa: E501
        """Record - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._state = None
        self._language = None
        self._toolchains = None
        self._commit_id = None
        self._score = None
        self._time_ms = None
        self._memory_kb = None
        self._problem_set_id = None
        self._problem_id = None
        self._problem_config_id = None
        self._committer_id = None
        self._judger_id = None
        self.discriminator = None
        self.id = id
        if state is not None:
            self.state = state
        self.language = language
        if toolchains is not None:
            self.toolchains = toolchains
        if commit_id is not None:
            self.commit_id = commit_id
        if score is not None:
            self.score = score
        if time_ms is not None:
            self.time_ms = time_ms
        if memory_kb is not None:
            self.memory_kb = memory_kb
        if problem_set_id is not None:
            self.problem_set_id = problem_set_id
        if problem_id is not None:
            self.problem_id = problem_id
        if problem_config_id is not None:
            self.problem_config_id = problem_config_id
        if committer_id is not None:
            self.committer_id = committer_id
        if judger_id is not None:
            self.judger_id = judger_id

    @property
    def id(self):
        """Gets the id of this Record.  # noqa: E501


        :return: The id of this Record.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Record.


        :param id: The id of this Record.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def state(self):
        """Gets the state of this Record.  # noqa: E501


        :return: The state of this Record.  # noqa: E501
        :rtype: AllOfRecordState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Record.


        :param state: The state of this Record.  # noqa: E501
        :type: AllOfRecordState
        """

        self._state = state

    @property
    def language(self):
        """Gets the language of this Record.  # noqa: E501


        :return: The language of this Record.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Record.


        :param language: The language of this Record.  # noqa: E501
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def toolchains(self):
        """Gets the toolchains of this Record.  # noqa: E501


        :return: The toolchains of this Record.  # noqa: E501
        :rtype: list[str]
        """
        return self._toolchains

    @toolchains.setter
    def toolchains(self, toolchains):
        """Sets the toolchains of this Record.


        :param toolchains: The toolchains of this Record.  # noqa: E501
        :type: list[str]
        """

        self._toolchains = toolchains

    @property
    def commit_id(self):
        """Gets the commit_id of this Record.  # noqa: E501


        :return: The commit_id of this Record.  # noqa: E501
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this Record.


        :param commit_id: The commit_id of this Record.  # noqa: E501
        :type: str
        """

        self._commit_id = commit_id

    @property
    def score(self):
        """Gets the score of this Record.  # noqa: E501


        :return: The score of this Record.  # noqa: E501
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Record.


        :param score: The score of this Record.  # noqa: E501
        :type: int
        """

        self._score = score

    @property
    def time_ms(self):
        """Gets the time_ms of this Record.  # noqa: E501


        :return: The time_ms of this Record.  # noqa: E501
        :rtype: int
        """
        return self._time_ms

    @time_ms.setter
    def time_ms(self, time_ms):
        """Sets the time_ms of this Record.


        :param time_ms: The time_ms of this Record.  # noqa: E501
        :type: int
        """

        self._time_ms = time_ms

    @property
    def memory_kb(self):
        """Gets the memory_kb of this Record.  # noqa: E501


        :return: The memory_kb of this Record.  # noqa: E501
        :rtype: int
        """
        return self._memory_kb

    @memory_kb.setter
    def memory_kb(self, memory_kb):
        """Sets the memory_kb of this Record.


        :param memory_kb: The memory_kb of this Record.  # noqa: E501
        :type: int
        """

        self._memory_kb = memory_kb

    @property
    def problem_set_id(self):
        """Gets the problem_set_id of this Record.  # noqa: E501


        :return: The problem_set_id of this Record.  # noqa: E501
        :rtype: str
        """
        return self._problem_set_id

    @problem_set_id.setter
    def problem_set_id(self, problem_set_id):
        """Sets the problem_set_id of this Record.


        :param problem_set_id: The problem_set_id of this Record.  # noqa: E501
        :type: str
        """

        self._problem_set_id = problem_set_id

    @property
    def problem_id(self):
        """Gets the problem_id of this Record.  # noqa: E501


        :return: The problem_id of this Record.  # noqa: E501
        :rtype: str
        """
        return self._problem_id

    @problem_id.setter
    def problem_id(self, problem_id):
        """Sets the problem_id of this Record.


        :param problem_id: The problem_id of this Record.  # noqa: E501
        :type: str
        """

        self._problem_id = problem_id

    @property
    def problem_config_id(self):
        """Gets the problem_config_id of this Record.  # noqa: E501


        :return: The problem_config_id of this Record.  # noqa: E501
        :rtype: str
        """
        return self._problem_config_id

    @problem_config_id.setter
    def problem_config_id(self, problem_config_id):
        """Sets the problem_config_id of this Record.


        :param problem_config_id: The problem_config_id of this Record.  # noqa: E501
        :type: str
        """

        self._problem_config_id = problem_config_id

    @property
    def committer_id(self):
        """Gets the committer_id of this Record.  # noqa: E501


        :return: The committer_id of this Record.  # noqa: E501
        :rtype: str
        """
        return self._committer_id

    @committer_id.setter
    def committer_id(self, committer_id):
        """Sets the committer_id of this Record.


        :param committer_id: The committer_id of this Record.  # noqa: E501
        :type: str
        """

        self._committer_id = committer_id

    @property
    def judger_id(self):
        """Gets the judger_id of this Record.  # noqa: E501


        :return: The judger_id of this Record.  # noqa: E501
        :rtype: str
        """
        return self._judger_id

    @judger_id.setter
    def judger_id(self, judger_id):
        """Sets the judger_id of this Record.


        :param judger_id: The judger_id of this Record.  # noqa: E501
        :type: str
        """

        self._judger_id = judger_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Record, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Record):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
