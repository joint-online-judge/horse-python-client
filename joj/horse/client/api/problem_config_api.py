# coding: utf-8

"""
    JOJ Horse

    Git version: 6e607f0@2021-12-05T20:00:02Z  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from joj.horse.client.api_client import ApiClient


class ProblemConfigApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def commit_problem_config_api_v1_domains_domain_problems_problem_config_commit_post(self, body, domain, problem, **kwargs):  # noqa: E501
        """Commit Problem Config  # noqa: E501

        Commit all changes through upload / delete as a new problem config version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commit_problem_config_api_v1_domains_domain_problems_problem_config_commit_post(body, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProblemConfigCommit body: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :return: ProblemConfigResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commit_problem_config_api_v1_domains_domain_problems_problem_config_commit_post_with_http_info(body, domain, problem, **kwargs)  # noqa: E501
        else:
            (data) = self.commit_problem_config_api_v1_domains_domain_problems_problem_config_commit_post_with_http_info(body, domain, problem, **kwargs)  # noqa: E501
            return data

    def commit_problem_config_api_v1_domains_domain_problems_problem_config_commit_post_with_http_info(self, body, domain, problem, **kwargs):  # noqa: E501
        """Commit Problem Config  # noqa: E501

        Commit all changes through upload / delete as a new problem config version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commit_problem_config_api_v1_domains_domain_problems_problem_config_commit_post_with_http_info(body, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProblemConfigCommit body: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :return: ProblemConfigResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain', 'problem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commit_problem_config_api_v1_domains_domain_problems_problem_config_commit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `commit_problem_config_api_v1_domains_domain_problems_problem_config_commit_post`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `commit_problem_config_api_v1_domains_domain_problems_problem_config_commit_post`")  # noqa: E501
        # verify the required parameter 'problem' is set
        if ('problem' not in params or
                params['problem'] is None):
            raise ValueError("Missing the required parameter `problem` when calling `commit_problem_config_api_v1_domains_domain_problems_problem_config_commit_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501
        if 'problem' in params:
            path_params['problem'] = params['problem']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/domains/{domain}/problems/{problem}/config/commit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProblemConfigResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_directory_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_dirs_path_delete(self, path, domain, problem, **kwargs):  # noqa: E501
        """Delete Directory From Uncommitted Problem Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_directory_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_dirs_path_delete(path, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :param bool recursive: Act as -r in the rm command. If false, only empty directory can be deleted.
        :return: FileInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_directory_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_dirs_path_delete_with_http_info(path, domain, problem, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_directory_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_dirs_path_delete_with_http_info(path, domain, problem, **kwargs)  # noqa: E501
            return data

    def delete_directory_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_dirs_path_delete_with_http_info(self, path, domain, problem, **kwargs):  # noqa: E501
        """Delete Directory From Uncommitted Problem Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_directory_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_dirs_path_delete_with_http_info(path, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :param bool recursive: Act as -r in the rm command. If false, only empty directory can be deleted.
        :return: FileInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'domain', 'problem', 'recursive']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_directory_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_dirs_path_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `delete_directory_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_dirs_path_delete`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `delete_directory_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_dirs_path_delete`")  # noqa: E501
        # verify the required parameter 'problem' is set
        if ('problem' not in params or
                params['problem'] is None):
            raise ValueError("Missing the required parameter `problem` when calling `delete_directory_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_dirs_path_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501
        if 'problem' in params:
            path_params['problem'] = params['problem']  # noqa: E501

        query_params = []
        if 'recursive' in params:
            query_params.append(('recursive', params['recursive']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/domains/{domain}/problems/{problem}/config/dirs/{path}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_file_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_delete(self, path, domain, problem, **kwargs):  # noqa: E501
        """Delete File From Uncommitted Problem Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_file_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_delete(path, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :return: FileInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_file_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_delete_with_http_info(path, domain, problem, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_file_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_delete_with_http_info(path, domain, problem, **kwargs)  # noqa: E501
            return data

    def delete_file_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_delete_with_http_info(self, path, domain, problem, **kwargs):  # noqa: E501
        """Delete File From Uncommitted Problem Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_file_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_delete_with_http_info(path, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :return: FileInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'domain', 'problem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_file_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `delete_file_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_delete`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `delete_file_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_delete`")  # noqa: E501
        # verify the required parameter 'problem' is set
        if ('problem' not in params or
                params['problem'] is None):
            raise ValueError("Missing the required parameter `problem` when calling `delete_file_from_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501
        if 'problem' in params:
            path_params['problem'] = params['problem']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/domains/{domain}/problems/{problem}/config/files/{path}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_file_in_problem_config_api_v1_domains_domain_problems_problem_configs_config_files_path_get(self, path, domain, problem, config, **kwargs):  # noqa: E501
        """Download File In Problem Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_file_in_problem_config_api_v1_domains_domain_problems_problem_configs_config_files_path_get(path, domain, problem, config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :param str config: 'latest' or id of the config (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_file_in_problem_config_api_v1_domains_domain_problems_problem_configs_config_files_path_get_with_http_info(path, domain, problem, config, **kwargs)  # noqa: E501
        else:
            (data) = self.download_file_in_problem_config_api_v1_domains_domain_problems_problem_configs_config_files_path_get_with_http_info(path, domain, problem, config, **kwargs)  # noqa: E501
            return data

    def download_file_in_problem_config_api_v1_domains_domain_problems_problem_configs_config_files_path_get_with_http_info(self, path, domain, problem, config, **kwargs):  # noqa: E501
        """Download File In Problem Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_file_in_problem_config_api_v1_domains_domain_problems_problem_configs_config_files_path_get_with_http_info(path, domain, problem, config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :param str config: 'latest' or id of the config (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'domain', 'problem', 'config']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_file_in_problem_config_api_v1_domains_domain_problems_problem_configs_config_files_path_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `download_file_in_problem_config_api_v1_domains_domain_problems_problem_configs_config_files_path_get`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `download_file_in_problem_config_api_v1_domains_domain_problems_problem_configs_config_files_path_get`")  # noqa: E501
        # verify the required parameter 'problem' is set
        if ('problem' not in params or
                params['problem'] is None):
            raise ValueError("Missing the required parameter `problem` when calling `download_file_in_problem_config_api_v1_domains_domain_problems_problem_configs_config_files_path_get`")  # noqa: E501
        # verify the required parameter 'config' is set
        if ('config' not in params or
                params['config'] is None):
            raise ValueError("Missing the required parameter `config` when calling `download_file_in_problem_config_api_v1_domains_domain_problems_problem_configs_config_files_path_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501
        if 'problem' in params:
            path_params['problem'] = params['problem']  # noqa: E501
        if 'config' in params:
            path_params['config'] = params['config']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/domains/{domain}/problems/{problem}/configs/{config}/files/{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_file_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_get(self, path, domain, problem, **kwargs):  # noqa: E501
        """Download File In Uncommitted Problem Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_file_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_get(path, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_file_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_get_with_http_info(path, domain, problem, **kwargs)  # noqa: E501
        else:
            (data) = self.download_file_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_get_with_http_info(path, domain, problem, **kwargs)  # noqa: E501
            return data

    def download_file_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_get_with_http_info(self, path, domain, problem, **kwargs):  # noqa: E501
        """Download File In Uncommitted Problem Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_file_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_get_with_http_info(path, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'domain', 'problem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_file_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `download_file_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_get`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `download_file_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_get`")  # noqa: E501
        # verify the required parameter 'problem' is set
        if ('problem' not in params or
                params['problem'] is None):
            raise ValueError("Missing the required parameter `problem` when calling `download_file_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_files_path_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501
        if 'problem' in params:
            path_params['problem'] = params['problem']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/domains/{domain}/problems/{problem}/config/files/{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_problem_config_archive_api_v1_domains_domain_problems_problem_configs_config_files_get(self, domain, problem, config, **kwargs):  # noqa: E501
        """Download Problem Config Archive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_problem_config_archive_api_v1_domains_domain_problems_problem_configs_config_files_get(domain, problem, config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :param str config: 'latest' or id of the config (required)
        :param ArchiveFormat1 archive_format:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_problem_config_archive_api_v1_domains_domain_problems_problem_configs_config_files_get_with_http_info(domain, problem, config, **kwargs)  # noqa: E501
        else:
            (data) = self.download_problem_config_archive_api_v1_domains_domain_problems_problem_configs_config_files_get_with_http_info(domain, problem, config, **kwargs)  # noqa: E501
            return data

    def download_problem_config_archive_api_v1_domains_domain_problems_problem_configs_config_files_get_with_http_info(self, domain, problem, config, **kwargs):  # noqa: E501
        """Download Problem Config Archive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_problem_config_archive_api_v1_domains_domain_problems_problem_configs_config_files_get_with_http_info(domain, problem, config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :param str config: 'latest' or id of the config (required)
        :param ArchiveFormat1 archive_format:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'problem', 'config', 'archive_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_problem_config_archive_api_v1_domains_domain_problems_problem_configs_config_files_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `download_problem_config_archive_api_v1_domains_domain_problems_problem_configs_config_files_get`")  # noqa: E501
        # verify the required parameter 'problem' is set
        if ('problem' not in params or
                params['problem'] is None):
            raise ValueError("Missing the required parameter `problem` when calling `download_problem_config_archive_api_v1_domains_domain_problems_problem_configs_config_files_get`")  # noqa: E501
        # verify the required parameter 'config' is set
        if ('config' not in params or
                params['config'] is None):
            raise ValueError("Missing the required parameter `config` when calling `download_problem_config_archive_api_v1_domains_domain_problems_problem_configs_config_files_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501
        if 'problem' in params:
            path_params['problem'] = params['problem']  # noqa: E501
        if 'config' in params:
            path_params['config'] = params['config']  # noqa: E501

        query_params = []
        if 'archive_format' in params:
            query_params.append(('archiveFormat', params['archive_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/domains/{domain}/problems/{problem}/configs/{config}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_uncommitted_problem_config_as_archive_api_v1_domains_domain_problems_problem_config_get(self, domain, problem, **kwargs):  # noqa: E501
        """Download Uncommitted Problem Config As Archive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_uncommitted_problem_config_as_archive_api_v1_domains_domain_problems_problem_config_get(domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :param ArchiveFormat archive_format:
        :return: EmptyResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_uncommitted_problem_config_as_archive_api_v1_domains_domain_problems_problem_config_get_with_http_info(domain, problem, **kwargs)  # noqa: E501
        else:
            (data) = self.download_uncommitted_problem_config_as_archive_api_v1_domains_domain_problems_problem_config_get_with_http_info(domain, problem, **kwargs)  # noqa: E501
            return data

    def download_uncommitted_problem_config_as_archive_api_v1_domains_domain_problems_problem_config_get_with_http_info(self, domain, problem, **kwargs):  # noqa: E501
        """Download Uncommitted Problem Config As Archive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_uncommitted_problem_config_as_archive_api_v1_domains_domain_problems_problem_config_get_with_http_info(domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :param ArchiveFormat archive_format:
        :return: EmptyResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'problem', 'archive_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_uncommitted_problem_config_as_archive_api_v1_domains_domain_problems_problem_config_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `download_uncommitted_problem_config_as_archive_api_v1_domains_domain_problems_problem_config_get`")  # noqa: E501
        # verify the required parameter 'problem' is set
        if ('problem' not in params or
                params['problem'] is None):
            raise ValueError("Missing the required parameter `problem` when calling `download_uncommitted_problem_config_as_archive_api_v1_domains_domain_problems_problem_config_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501
        if 'problem' in params:
            path_params['problem'] = params['problem']  # noqa: E501

        query_params = []
        if 'archive_format' in params:
            query_params.append(('archiveFormat', params['archive_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/domains/{domain}/problems/{problem}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_file_or_directory_info_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_file_info_path_get(self, path, domain, problem, **kwargs):  # noqa: E501
        """Get File Or Directory Info In Uncommitted Problem Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_file_or_directory_info_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_file_info_path_get(path, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :return: FileInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_file_or_directory_info_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_file_info_path_get_with_http_info(path, domain, problem, **kwargs)  # noqa: E501
        else:
            (data) = self.get_file_or_directory_info_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_file_info_path_get_with_http_info(path, domain, problem, **kwargs)  # noqa: E501
            return data

    def get_file_or_directory_info_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_file_info_path_get_with_http_info(self, path, domain, problem, **kwargs):  # noqa: E501
        """Get File Or Directory Info In Uncommitted Problem Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_file_or_directory_info_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_file_info_path_get_with_http_info(path, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str path: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :return: FileInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'domain', 'problem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_file_or_directory_info_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_file_info_path_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_file_or_directory_info_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_file_info_path_get`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `get_file_or_directory_info_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_file_info_path_get`")  # noqa: E501
        # verify the required parameter 'problem' is set
        if ('problem' not in params or
                params['problem'] is None):
            raise ValueError("Missing the required parameter `problem` when calling `get_file_or_directory_info_in_uncommitted_problem_config_api_v1_domains_domain_problems_problem_config_file_info_path_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501
        if 'problem' in params:
            path_params['problem'] = params['problem']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/domains/{domain}/problems/{problem}/config/file_info/{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_problem_config_json_api_v1_domains_domain_problems_problem_configs_config_get(self, domain, config, problem, **kwargs):  # noqa: E501
        """Get Problem Config Json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_problem_config_json_api_v1_domains_domain_problems_problem_configs_config_get(domain, config, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: url or id of the domain (required)
        :param str config: 'latest' or id of the config (required)
        :param str problem: url or id of the problem (required)
        :return: ProblemConfigResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_problem_config_json_api_v1_domains_domain_problems_problem_configs_config_get_with_http_info(domain, config, problem, **kwargs)  # noqa: E501
        else:
            (data) = self.get_problem_config_json_api_v1_domains_domain_problems_problem_configs_config_get_with_http_info(domain, config, problem, **kwargs)  # noqa: E501
            return data

    def get_problem_config_json_api_v1_domains_domain_problems_problem_configs_config_get_with_http_info(self, domain, config, problem, **kwargs):  # noqa: E501
        """Get Problem Config Json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_problem_config_json_api_v1_domains_domain_problems_problem_configs_config_get_with_http_info(domain, config, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: url or id of the domain (required)
        :param str config: 'latest' or id of the config (required)
        :param str problem: url or id of the problem (required)
        :return: ProblemConfigResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'config', 'problem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_problem_config_json_api_v1_domains_domain_problems_problem_configs_config_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `get_problem_config_json_api_v1_domains_domain_problems_problem_configs_config_get`")  # noqa: E501
        # verify the required parameter 'config' is set
        if ('config' not in params or
                params['config'] is None):
            raise ValueError("Missing the required parameter `config` when calling `get_problem_config_json_api_v1_domains_domain_problems_problem_configs_config_get`")  # noqa: E501
        # verify the required parameter 'problem' is set
        if ('problem' not in params or
                params['problem'] is None):
            raise ValueError("Missing the required parameter `problem` when calling `get_problem_config_json_api_v1_domains_domain_problems_problem_configs_config_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501
        if 'config' in params:
            path_params['config'] = params['config']  # noqa: E501
        if 'problem' in params:
            path_params['problem'] = params['problem']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/domains/{domain}/problems/{problem}/configs/{config}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProblemConfigResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_problem_config_api_v1_domains_domain_problems_problem_config_reset_post(self, body, domain, problem, **kwargs):  # noqa: E501
        """Reset Problem Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_problem_config_api_v1_domains_domain_problems_problem_config_reset_post(body, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LakeFSReset body: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :return: EmptyResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_problem_config_api_v1_domains_domain_problems_problem_config_reset_post_with_http_info(body, domain, problem, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_problem_config_api_v1_domains_domain_problems_problem_config_reset_post_with_http_info(body, domain, problem, **kwargs)  # noqa: E501
            return data

    def reset_problem_config_api_v1_domains_domain_problems_problem_config_reset_post_with_http_info(self, body, domain, problem, **kwargs):  # noqa: E501
        """Reset Problem Config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_problem_config_api_v1_domains_domain_problems_problem_config_reset_post_with_http_info(body, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LakeFSReset body: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :return: EmptyResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'domain', 'problem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_problem_config_api_v1_domains_domain_problems_problem_config_reset_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `reset_problem_config_api_v1_domains_domain_problems_problem_config_reset_post`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `reset_problem_config_api_v1_domains_domain_problems_problem_config_reset_post`")  # noqa: E501
        # verify the required parameter 'problem' is set
        if ('problem' not in params or
                params['problem'] is None):
            raise ValueError("Missing the required parameter `problem` when calling `reset_problem_config_api_v1_domains_domain_problems_problem_config_reset_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501
        if 'problem' in params:
            path_params['problem'] = params['problem']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/domains/{domain}/problems/{problem}/config/reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_problem_config_by_archive_api_v1_domains_domain_problems_problem_config_put(self, file, domain, problem, **kwargs):  # noqa: E501
        """Update Problem Config By Archive  # noqa: E501

        Completely replace the problem config with the archive. This will delete files not included in the archive.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_problem_config_by_archive_api_v1_domains_domain_problems_problem_config_put(file, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :return: EmptyResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_problem_config_by_archive_api_v1_domains_domain_problems_problem_config_put_with_http_info(file, domain, problem, **kwargs)  # noqa: E501
        else:
            (data) = self.update_problem_config_by_archive_api_v1_domains_domain_problems_problem_config_put_with_http_info(file, domain, problem, **kwargs)  # noqa: E501
            return data

    def update_problem_config_by_archive_api_v1_domains_domain_problems_problem_config_put_with_http_info(self, file, domain, problem, **kwargs):  # noqa: E501
        """Update Problem Config By Archive  # noqa: E501

        Completely replace the problem config with the archive. This will delete files not included in the archive.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_problem_config_by_archive_api_v1_domains_domain_problems_problem_config_put_with_http_info(file, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :return: EmptyResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'domain', 'problem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_problem_config_by_archive_api_v1_domains_domain_problems_problem_config_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `update_problem_config_by_archive_api_v1_domains_domain_problems_problem_config_put`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `update_problem_config_by_archive_api_v1_domains_domain_problems_problem_config_put`")  # noqa: E501
        # verify the required parameter 'problem' is set
        if ('problem' not in params or
                params['problem'] is None):
            raise ValueError("Missing the required parameter `problem` when calling `update_problem_config_by_archive_api_v1_domains_domain_problems_problem_config_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501
        if 'problem' in params:
            path_params['problem'] = params['problem']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/domains/{domain}/problems/{problem}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmptyResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_file_to_problem_config_api_v1_domains_domain_problems_problem_config_files_path_put(self, file, domain, problem, path, **kwargs):  # noqa: E501
        """Upload File To Problem Config  # noqa: E501

        Replace the file with the same path. Create directories if needed along the path.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file_to_problem_config_api_v1_domains_domain_problems_problem_config_files_path_put(file, domain, problem, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :param str path: (required)
        :return: FileInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_file_to_problem_config_api_v1_domains_domain_problems_problem_config_files_path_put_with_http_info(file, domain, problem, path, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_file_to_problem_config_api_v1_domains_domain_problems_problem_config_files_path_put_with_http_info(file, domain, problem, path, **kwargs)  # noqa: E501
            return data

    def upload_file_to_problem_config_api_v1_domains_domain_problems_problem_config_files_path_put_with_http_info(self, file, domain, problem, path, **kwargs):  # noqa: E501
        """Upload File To Problem Config  # noqa: E501

        Replace the file with the same path. Create directories if needed along the path.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file_to_problem_config_api_v1_domains_domain_problems_problem_config_files_path_put_with_http_info(file, domain, problem, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :param str path: (required)
        :return: FileInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'domain', 'problem', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file_to_problem_config_api_v1_domains_domain_problems_problem_config_files_path_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_file_to_problem_config_api_v1_domains_domain_problems_problem_config_files_path_put`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `upload_file_to_problem_config_api_v1_domains_domain_problems_problem_config_files_path_put`")  # noqa: E501
        # verify the required parameter 'problem' is set
        if ('problem' not in params or
                params['problem'] is None):
            raise ValueError("Missing the required parameter `problem` when calling `upload_file_to_problem_config_api_v1_domains_domain_problems_problem_config_files_path_put`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `upload_file_to_problem_config_api_v1_domains_domain_problems_problem_config_files_path_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501
        if 'problem' in params:
            path_params['problem'] = params['problem']  # noqa: E501
        if 'path' in params:
            path_params['path'] = params['path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/domains/{domain}/problems/{problem}/config/files/{path}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_file_to_root_in_problem_config_api_v1_domains_domain_problems_problem_config_files_put(self, file, domain, problem, **kwargs):  # noqa: E501
        """Upload File To Root In Problem Config  # noqa: E501

        Use the filename as path, file will be uploaded to root of the problem config directory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file_to_root_in_problem_config_api_v1_domains_domain_problems_problem_config_files_put(file, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :return: FileInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_file_to_root_in_problem_config_api_v1_domains_domain_problems_problem_config_files_put_with_http_info(file, domain, problem, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_file_to_root_in_problem_config_api_v1_domains_domain_problems_problem_config_files_put_with_http_info(file, domain, problem, **kwargs)  # noqa: E501
            return data

    def upload_file_to_root_in_problem_config_api_v1_domains_domain_problems_problem_config_files_put_with_http_info(self, file, domain, problem, **kwargs):  # noqa: E501
        """Upload File To Root In Problem Config  # noqa: E501

        Use the filename as path, file will be uploaded to root of the problem config directory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file_to_root_in_problem_config_api_v1_domains_domain_problems_problem_config_files_put_with_http_info(file, domain, problem, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str domain: url or id of the domain (required)
        :param str problem: url or id of the problem (required)
        :return: FileInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'domain', 'problem']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file_to_root_in_problem_config_api_v1_domains_domain_problems_problem_config_files_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_file_to_root_in_problem_config_api_v1_domains_domain_problems_problem_config_files_put`")  # noqa: E501
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `upload_file_to_root_in_problem_config_api_v1_domains_domain_problems_problem_config_files_put`")  # noqa: E501
        # verify the required parameter 'problem' is set
        if ('problem' not in params or
                params['problem'] is None):
            raise ValueError("Missing the required parameter `problem` when calling `upload_file_to_root_in_problem_config_api_v1_domains_domain_problems_problem_config_files_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501
        if 'problem' in params:
            path_params['problem'] = params['problem']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTPBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/domains/{domain}/problems/{problem}/config/files', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
